#!/usr/bin/env bash

# - Initialize a file's repository with `git1 <filename> init`
# - Remove a repo with `git1 <filename> deinit`, which
#   does not delete the file itself
# - Use `git1 <filename> <git-command>` for operations like status, commit, ...
# - List all file-specific repos in the same directory with `git1 ls`
#
# For convenience, create a temporary alias like `alias gg='git1 foo.txt'` to
# simplify repeated commands.

set -o errtrace -o errexit -o nounset -o pipefail
[[ "${TRACE:-0}" == "1" ]] && set -o xtrace

shopt -s inherit_errexit
IFS=$'\n\t'
PS4='+\t '

error_handler() {
  echo >&2 "Error: In ${BASH_SOURCE[0]}, Lines $1 and $2, Command $3 exited with Status $4"
  pr -tn "${BASH_SOURCE[0]}" | tail -n+$(($1 - 3)) | head -n7 | sed '4s/^\s*/>> /' >&2
  exit "$4"
}
trap 'error_handler $LINENO "$BASH_LINENO" "$BASH_COMMAND" $?' ERR

BANG='!'
FILE="${1:-help}"

case "$FILE" in
  ls)
    ls -ld .g1_* 2> /dev/null | sed 's/.*g1_//'
    exit 0
    ;;
  help)
    tail -n +2 "$(which "$0")" | grep '^#' | sed 's/^#//' | less
    exit 0
    ;;
  *)
    if ! [ -f "$FILE" ]; then
      echo "$FILE" must exist! Exiting.
      exit 1
    fi
    ;;
esac

shift

case "$1" in
  init)
    GIT_DIR=".g1_$FILE"
    git init --quiet --bare "$GIT_DIR"
    echo -e "*\n${BANG}$FILE" > "$GIT_DIR/info/exclude"
    git --git-dir="$GIT_DIR" --work-tree="." add "$FILE"
    git --git-dir="$GIT_DIR" --work-tree="." commit -m "initial commit"
    git --git-dir="$GIT_DIR" --work-tree="." status
    echo "Repo created!"
    ;;
  deinit)
    FILE="$2"
    rm -rI ".g1_$FILE"
    ;;
  *)
    git --git-dir=".g1_$FILE" --work-tree="." "$@"
    ;;
esac
